import { useState, useEffect, useCallback, useRef } from 'react'
import { api } from '../api'
import type { Department, Employee, Equipment, Schedule } from '../types'

interface RealTimeDataState {
  departments: Department[]
  employees: Employee[]
  equipment: Equipment[]
  schedules: Schedule[]
  lastUpdated: Date | null
  isConnected: boolean
  connectionError: string | null
}

export function useRealTimeData() {
  const [state, setState] = useState<RealTimeDataState>({
    departments: [],
    employees: [],
    equipment: [],
    schedules: [],
    lastUpdated: null,
    isConnected: false,
    connectionError: null,
  })

  const intervalRef = useRef<NodeJS.Timeout | null>(null)
  const retryCountRef = useRef(0)
  const maxRetries = 5

  // „Éá„Éº„ÇøÂèñÂæóÈñ¢Êï∞
  const fetchAllData = useCallback(async () => {
    try {
      console.log('üîÑ Fetching real-time data...')
      
      const [departmentsRes, employeesRes, equipmentRes, schedulesRes] = await Promise.all([
        api.get('/departments'),
        api.get('/employees'),
        api.get('/equipment'),
        api.get('/schedules'),
      ])

      const newState = {
        departments: Array.isArray(departmentsRes.data) ? departmentsRes.data : [],
        employees: Array.isArray(employeesRes.data) ? employeesRes.data : [],
        equipment: Array.isArray(equipmentRes.data) ? equipmentRes.data : [],
        schedules: Array.isArray(schedulesRes.data) ? schedulesRes.data : [],
        lastUpdated: new Date(),
        isConnected: true,
        connectionError: null,
      }

      setState(newState)
      retryCountRef.current = 0
      
      console.log('‚úÖ Real-time data updated:', {
        departments: newState.departments.length,
        employees: newState.employees.length,
        equipment: newState.equipment.length,
        schedules: newState.schedules.length,
        timestamp: newState.lastUpdated?.toLocaleTimeString(),
      })

      return newState

    } catch (error: any) {
      console.error('‚ùå Failed to fetch real-time data:', error.message)
      
      retryCountRef.current++
      
      setState(prev => ({
        ...prev,
        isConnected: false,
        connectionError: `Êé•Á∂ö„Ç®„É©„Éº (${retryCountRef.current}/${maxRetries}): ${error.message}`,
      }))

      // ÊúÄÂ§ß„É™„Éà„É©„Ç§ÂõûÊï∞„Å´ÈÅî„Åó„ÅüÂ†¥Âêà„ÅØÂÅúÊ≠¢
      if (retryCountRef.current >= maxRetries) {
        console.error('üö® Max retries reached, stopping real-time updates')
        stopRealTimeUpdates()
      }

      throw error
    }
  }, [])

  // „É™„Ç¢„É´„Çø„Ç§„É†Êõ¥Êñ∞ÈñãÂßã
  const startRealTimeUpdates = useCallback((intervalMs: number = 10000) => {
    console.log(`üöÄ Starting real-time updates (${intervalMs}ms interval)`)
    
    // ÂàùÂõû„Éá„Éº„ÇøÂèñÂæó
    fetchAllData()

    // ÂÆöÊúüÊõ¥Êñ∞ÈñãÂßã
    if (intervalRef.current) {
      clearInterval(intervalRef.current)
    }

    intervalRef.current = setInterval(() => {
      fetchAllData().catch(() => {
        // „Ç®„É©„Éº„ÅØ fetchAllData ÂÜÖ„ÅßÂá¶ÁêÜÊ∏à„Åø
      })
    }, intervalMs)

  }, [fetchAllData])

  // „É™„Ç¢„É´„Çø„Ç§„É†Êõ¥Êñ∞ÂÅúÊ≠¢
  const stopRealTimeUpdates = useCallback(() => {
    console.log('üõë Stopping real-time updates')
    
    if (intervalRef.current) {
      clearInterval(intervalRef.current)
      intervalRef.current = null
    }

    setState(prev => ({
      ...prev,
      isConnected: false,
    }))
  }, [])

  // ÊâãÂãïÊõ¥Êñ∞
  const manualRefresh = useCallback(async () => {
    console.log('üîÑ Manual refresh triggered')
    return await fetchAllData()
  }, [fetchAllData])

  // ÁâπÂÆö„Éá„Éº„Çø„ÅÆÊõ¥Êñ∞
  const refreshSchedules = useCallback(async () => {
    try {
      const response = await api.get('/schedules')
      const newSchedules = Array.isArray(response.data) ? response.data : []
      
      setState(prev => ({
        ...prev,
        schedules: newSchedules,
        lastUpdated: new Date(),
      }))

      console.log('‚úÖ Schedules refreshed:', newSchedules.length, 'items')
      return newSchedules
    } catch (error) {
      console.error('‚ùå Failed to refresh schedules:', error)
      throw error
    }
  }, [])

  // „Éá„Éº„ÇøÂ§âÊõ¥„ÅÆÊ§úÂá∫
  const hasDataChanged = useCallback((newData: Partial<RealTimeDataState>) => {
    if (newData.schedules && newData.schedules.length !== state.schedules.length) {
      return true
    }
    
    if (newData.departments && newData.departments.length !== state.departments.length) {
      return true
    }

    if (newData.employees && newData.employees.length !== state.employees.length) {
      return true
    }

    if (newData.equipment && newData.equipment.length !== state.equipment.length) {
      return true
    }

    return false
  }, [state])

  // „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Ç¢„É≥„Éû„Ç¶„É≥„ÉàÊôÇ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
  useEffect(() => {
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
      }
    }
  }, [])

  return {
    // Data
    ...state,
    
    // Actions
    startRealTimeUpdates,
    stopRealTimeUpdates,
    manualRefresh,
    refreshSchedules,
    hasDataChanged,
    
    // Status
    retryCount: retryCountRef.current,
    maxRetries,
  }
}
